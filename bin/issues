#!/usr/bin/env python


import json
from github import Github
from github.GithubException import GithubException
from github.GithubObject import NotSet
from tabulate import tabulate
from dateutil.parser import parse
import issues

def print_issues(i):
    for issue in i:
        print "* #%d\t%s" % (issue.number, issue.title)

def get_assignee(issue):
    if issue.assignee:
        return issue.assignee.login
    else:
        return None

def get_type(issue):
    if issue.pull_request.html_url:
        return "P"
    else:
        return "I"

def print_milestones(m, num_uncategorized_issues):
    listed = [[x.title, x.due_on, x.description, x.open_issues] for x in m]
    listed.append([u"Uncategorized", u"Never", u"", num_uncategorized_issues])
    print tabulate(listed, headers=[u"Title", u"Due on", u"Description", u"# Open"], tablefmt="pipe")

def list_issues_by_milestone(token, repo_list, milestone_name):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        if milestone_name == 'none':
            m = 'none'
        else:
            m = issues.milestone_by_name(repo, milestone_name)
            if not m:
                raise Exception("No milestone with name %s" % milestone_name)
        print '===> Processing issues for repo %s' % r
        print_issues(issues.open_issues_in_milestone(repo, m))
        print '\n'

def list_issues_by_label(token, repo_list, label_names):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        labels = [repo.get_label(l) for l in label_names.split(",")]
        print_issues(issues.open_issues_by_label(repo, labels))
        print '\n'

def list_milestones(token, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        milestones = repo.get_milestones()
        print '===> Processing milestones for repo %s' % r
        num_uncategorized_issues = len(list(repo.get_issues(milestone='none')))
        print_milestones(milestones, num_uncategorized_issues)
        print '\n'

def create_milestone(token, milestone_title, description, due_date, repo_list):
    if due_date:
        parsed_date = parse(due_date)
    else:
        parsed_date = NotSet

    if not description:
        description = NotSet
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        try:
            repo.create_milestone(milestone_title, description=description, due_on=parsed_date)
        except GithubException as e:
            if e.status == 422:
                m = issues.milestone_by_name(repo, milestone_title)
                m.edit(milestone_title, description=description, due_on=parsed_date)
            else:
                raise e

def delete_milestone(token, milestone_title, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, milestone_title)
        m.delete()

def close_milestone(token, milestone_title, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, milestone_title)
        m.edit(milestone_title, state='closed')

def rename_milestone(token, old_name, new_name, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, old_name)
        m.edit(new_name)

def json_milestones(token, output, repo_list):
    json_map = {}
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        milestones = repo.get_milestones()
        for stone in milestones:
            issue_list = issues.open_issues_in_milestone(repo, stone)
            issues_json = json_map.get(stone.title, {})
            issues_json[r] = {"open": stone.open_issues, "closed": stone.closed_issues, "number": stone.number, "issues": [{"number": i.number, "title": i.title, "url": i.html_url, "assignee": get_assignee(i), "type": get_type(i)} for i in issue_list] }
            json_map[stone.title] = issues_json
        issues_json = json_map.get("uncategorized", {})
        issue_list = list(repo.get_issues(milestone='none'))
        issues_json[r] = {"open": len(issue_list), "closed": 0, "number": 0, "issues": [{"number": i.number, "title": i.title, "url": i.html_url, "assignee": get_assignee(i), "type": get_type(i)} for i in issue_list] }
        json_map["uncategorized"] = issues_json
    json.dump(json_map, open(output, 'w'))

if __name__ == '__main__':
    import sys
    import argparse
    parser = argparse.ArgumentParser(usage='%(prog)s <command> [options] [repos]', description="commands: list create delete")
    parser.add_argument("-t", "--token", help="GitHub access token", required=True)
    command = sys.argv[1]
    if command == "list-issues":
        parser.add_argument("-g", "--group", help="group by 'milestone' or 'label'", required=True)
        parser.add_argument("-f", "--filter", help="milestone or label name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        elif args.group == "milestone" or args.group == "m":
            list_issues_by_milestone(args.token, repo_list, args.filter)
        elif args.group == "label" or args.group == "l":
            list_issues_by_label(args.token, repo_list, args.filter)
        else:
            print "group must be one of 'milestone' (or 'm') or 'label' (or 'l')"
            print '\n'
    elif command == "list":
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            list_milestones(args.token, repo_list)
    elif command == "create":
        parser.add_argument("-m", "--milestone", help="milestone name", required=True)
        parser.add_argument("-D", "--date", help="milestone due date")
        parser.add_argument("-d", "--description", help="milestone description")
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            create_milestone(args.token, args.milestone, args.description, args.date, repo_list)
    elif command == "delete":
        parser.add_argument("-m", "--milestone", help="milestone name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            delete_milestone(args.token, args.milestone, repo_list)
    elif command == "close":
        parser.add_argument("-m", "--milestone", help="milestone name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            close_milestone(args.token, args.milestone, repo_list)
    elif command == "rename":
        parser.add_argument("-m", "--milestone", help="old milestone name", required=True)
        parser.add_argument("-n", "--new-name", help="new milestone name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            rename_milestone(args.token, args.milestone, args.new_name, repo_list)
    elif command == "json":
        parser.add_argument("-o", "--output", help="output filename", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            json_milestones(args.token, args.output, repo_list)
    else:
        print "invalid command %s" % command
