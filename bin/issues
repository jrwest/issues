#!/usr/bin/env python


from github import Github
from github.GithubException import GithubException
from tabulate import tabulate
from dateutil.parser import parse
import issues

def print_issues(i):
    for issue in i:
        print "* %s" % issue.title

def print_milestones(m, num_uncategorized_issues):
    listed = [[x.title, x.due_on, x.description, x.open_issues] for x in m]
    listed.append([u"Uncategorized", u"Never", u"", num_uncategorized_issues])
    print tabulate(listed, headers=[u"Title", u"Due on", u"Description", u"# Open"], tablefmt="pipe")

def list_issues(token, repo_list, milestone_name):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, milestone_name)
        print '===> Processing issues for repo %s' % r
        print_issues(issues.open_issues_in_milestone(repo, m))
        print '\n'

def list_milestones(token, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        milestones = repo.get_milestones()
        print '===> Processing milestones for repo %s' % r
        num_uncategorized_issues = len(list(repo.get_issues(milestone='none')))
        print_milestones(milestones, num_uncategorized_issues)
        print '\n'

def create_milestone(token, milestone_title, description, due_date, repo_list):
    parsed_date = parse(due_date)
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        try:
            repo.create_milestone(milestone_title, description=description, due_on=parsed_date)
        except GithubException as e:
            if e.status == 422:
                m = issues.milestone_by_name(repo, milestone_title)
                m.edit(milestone_title, description=description, due_on=parsed_date)
            else:
                raise e

def rename_milestone(token, old_name, new_name, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, old_name)
        m.edit(new_name)

if __name__ == '__main__':
    import sys
    import argparse
    parser = argparse.ArgumentParser(usage='%(prog)s <command> [options] [repos]', description="commands: list create delete")
    parser.add_argument("-t", "--token", help="GitHub access token", required=True)
    command = sys.argv[1]
    if command == "list-issues":
        parser.add_argument("-m", "--milestone", help="milestone name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            list_issues(args.token, repo_list, args.milestone)
    elif command == "list":
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            list_milestones(args.token, repo_list)
    elif command == "create":
        parser.add_argument("-m", "--milestone", help="milestone name", required=True)
        parser.add_argument("-D", "--date", help="milestone due date", required=True)
        parser.add_argument("-d", "--description", help="milestone description", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            create_milestone(args.token, args.milestone, args.description, args.date, repo_list)
    elif command == "rename":
        parser.add_argument("-m", "--milestone", help="old milestone name", required=True)
        parser.add_argument("-n", "--new-name", help="new milestone name", required=True)
        (args, repo_list) = parser.parse_known_args(args=sys.argv[2:])
        if len(repo_list) == 0:
            parser.print_usage()
        else:
            rename_milestone(args.token, args.milestone, args.new_name, repo_list)
    else:
        print "invalid command %s" % command
